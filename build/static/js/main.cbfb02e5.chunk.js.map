{"version":3,"sources":["components/Navigation/Navigation.js","components/Signin/Signin.js","components/Logo/Logo.js","components/ImageLinkForm/ImageLinkForm.js","components/Rank/Rank.js","components/FaceRecognition/FaceRecognition.js","components/Register/Register.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","onRouteChange","isSignedIn","style","display","justifyContent","onClick","className","Signin","props","onEmailChange","event","setState","signInEmail","target","value","onPasswordChange","signInPassword","onSubmitSignIn","loadUser","fetch","method","headers","body","JSON","stringify","email","state","password","then","response","json","data","id","htmlFor","onChange","this","type","name","Component","Logo","ImageLinkForm","onInputChange","onSubmit","Rank","user","console","log","toUpperCase","entries","FaceRecognition","ImageURL","box","alt","src","width","heigh","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","Register","onNameChange","onRegisterClick","autoComplete","React","particleOptions","particles","number","density","enable","value_area","initialState","input","imageURL","route","joined","App","calculateFaceLocation","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","Number","height","left_col","top_row","right_col","bottom_row","displayFaceBox","InputChange","onButtonSubmit","imageUrl","response1","count","Object","assign","catch","err","params","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.cbfb02e5.chunk.js","sourcesContent":["import React from 'react';\n\nconst Navigation = ({onRouteChange,isSignedIn}) =>{\n    if(isSignedIn){\n        return(\n            <nav style={{display:'flex',justifyContent:'flex-end'}}>\n                <p onClick={()=> onRouteChange('signout')}\n                className='f3 link dim black underline pa3 pointer'>Sign Out</p>\n            </nav>\n        )\n    }\n    else{\n        return(\n        <nav style={{display:'flex',justifyContent:'flex-end'}}>\n            <p onClick={()=> onRouteChange('signin')}\n            className='f3 link dim black underline pa3 pointer'>Signin</p>\n            <p onClick={()=> onRouteChange('register')}\n            className='f3 link dim black underline pa3 pointer'>Register</p>\n        </nav>\n        )\n    }\n}\n\nexport default Navigation;","import React, { Component } from 'react';\n\nclass Signin extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            signInEmail : '',\n            signInPassword : ''\n        }\n    }\n\n    onEmailChange = (event) => {\n        this.setState({signInEmail:event.target.value})\n    }\n\n    onPasswordChange = (event) => {\n        this.setState({signInPassword:event.target.value})\n    }\n\n    onSubmitSignIn = () =>{\n        const { onRouteChange,loadUser } = this.props;\n        fetch('http://localhost:3001/signin',{\n            method: 'POST',\n            headers : {'Content-Type': 'application/json'},\n            body: JSON.stringify({\n                email: this.state.signInEmail,\n                password: this.state.signInPassword\n            })\n        }).then(function(response) {\n            return response.json();\n          }).then(function(data) {\n              if(data.id){\n                loadUser(data)\n                onRouteChange('home')\n              }\n            \n          });\n    }\n\n    render(){\n        return (\n            <article className=\"br3 ba  b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5  center\">\n                <main className=\"pa4 black-80\">\n                    <div className=\"measure\">\n                        <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\n                            <legend className=\"f4 fw6 ph0 mh0\">Sign In</legend>\n                            <div className=\"mt3\">\n                                <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\n                                <input onChange={this.onEmailChange}\n                                className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" \n                                type=\"email\" \n                                id=\"email-address\"\n                                name=\"email-address\" />\n                            </div>\n                            <div className=\"mv3\">\n                                <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\n                                <input\n                                className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\n                                type=\"password\"\n                                name=\"password\"\n                                id=\"password\"\n                                onChange={this.onPasswordChange}\n                                \n                                />\n                            </div>\n                        </fieldset>\n                        <div className=\"\">\n                            <input onClick={this.onSubmitSignIn}\n                            className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\" type=\"submit\" value=\"Sign in\"/>\n                        </div>\n                        <div className=\"lh-copy mt3\">\n                            {/* { <p  onClick={()=> onRouteChange('Register')}\n                                className=\"f6 link dim black db pointer\">\n                                Register\n                            </p> } */}\n                        </div>\n                    </div>\n                </main>\n            </article>\n        );\n    }\n}\n\nexport default Signin;","import React from 'react';\n\nconst Logo = () =>{\n    return (\n        <div className='ma4 mt0'></div>\n    )\n}\n\nexport default Logo;","import React from 'react';\n\nconst ImageLinkForm = ({onInputChange,onSubmit}) =>{\n    return (\n        <div>\n            <p className='f3'>\n                {'This Magic Brain will detect faces in your pictures'}\n            </p>\n            <div className='center'>\n                <div className='center pa4 br3 shadow-5'>\n                    <input className='f4 pa2 w-70 center' type='text' onChange={onInputChange}/>\n                    <button \n                    className='w-30 grow f4 ph3 pv2 dib white bg-light-purple'\n                    onClick={onSubmit}\n                    >Detect</button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ImageLinkForm;","import React from 'react';\n\nconst Rank = ({user}) => {\n    console.log(user)\n    return (\n        <div>\n            <div className='white f3'>\n              {`${user.name.toUpperCase()}, your current rank is ${user.entries}`}\n            </div>\n            <div className='white f1'>\n                {'#5'}\n            </div>\n        </div>\n    )\n}\n\nexport default Rank;","import React from 'react';\nimport './FaceRecognition.css';\n\nconst FaceRecognition = ({ImageURL,box}) => {\n    return (\n        <div className='center ma'>\n          <div className='absolute mt2'>\n            <img id='inputImage' alt='' src={ImageURL} width='500px' heigh='auto'/>\n            <div className='bounding-box' style={{top: box.topRow, right: box.rightCol, bottom: box.bottomRow, left: box.leftCol}}></div>\n          </div>\n        </div>\n      );\n}\n\nexport default FaceRecognition;","import React from 'react';\n\nclass Register extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            name : \"\",\n            email : \"\",\n            password : \"\"\n        }\n    }\n\n    onNameChange = (event) => {\n        this.setState({name : event.target.value})\n    }\n\n    onEmailChange = (event) => {\n        this.setState({email : event.target.value})\n    }\n\n    onPasswordChange = (event) => {\n        this.setState({password : event.target.value})\n    }\n\n    onRegisterClick = () => {\n        const { onRouteChange, loadUser } = this.props; \n        fetch('http://localhost:3001/register',\n        {\n            method : 'POST',\n            headers : {'Content-Type': 'application/json'},\n            body: JSON.stringify({\n                name : this.state.name,\n                email : this.state.email,\n                password: this.state.password\n            }) \n        }).then(response => response.json())\n        .then(data => {\n            if(data.id){\n                loadUser(data);\n                onRouteChange('home')\n            }\n        })\n    }\n\n    render(){\n        return (\n            <article className=\"br3 ba  b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5  center\">\n            <main className=\"pa4 black-80\">\n                <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\n                    <legend className=\"f4 fw6 ph0 mh0\">Register</legend>\n                    <div className=\"mt3\">\n                        <label className=\"db fw6 lh-copy f6\" htmlFor=\"Name\">Name</label>\n                        <input onChange={this.onNameChange} className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"text\" name=\"Name\"  id=\"Name\"/>\n                    </div>\n                    <div className=\"mt3\">\n                        <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\n                        <input onChange={this.onEmailChange} className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"email\" name=\"email-address\"  id=\"email-address\"/>\n                    </div>\n                    <div className=\"mv3\">\n                        <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\n                        <input onChange={this.onPasswordChange} className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"password\" name=\"password\"  id=\"password\" autoComplete = \"true\"/>\n                    </div>\n                </fieldset>\n                {/* <div className=\"\">\n                    <input onClick={()=> onRouteChange('home')}\n                    className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\" type=\"submit\" value=\"Sign in\"/>\n                </div> */}\n                <div className=\"lh-copy mt3\">\n                    <p  onClick={this.onRegisterClick}\n                        className=\"f6 link dim black db pointer\">\n                        Register\n                    </p>\n                </div>\n            </main>\n            </article>\n        )\n    }\n    \n}\n\nexport default Register;","import React, { Component } from 'react';\nimport './App.css';\nimport Particles from 'react-particles-js';\nimport Navigation from './components/Navigation/Navigation';\nimport Signin from './components/Signin/Signin';\n\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Register from './components/Register/Register';\n\nconst particleOptions = {\n  particles:{\n    number:{\n      value:30,\n      density:{\n        enable:true,\n        value_area:800\n      }\n    }\n  }\n}\n\nconst initialState = {\n  input: '',\n  imageURL : '',\n  box : {},\n  route : 'signin',\n  isSignedIn : false,\n  user : {\n    id : '',\n    name : '',\n    email: '',\n    entries : '',\n    joined : ''\n    \n  }\n}\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = initialState\n  }\n\n  //connection Front end with backend\n  // componentDidMount(){\n  //   fetch('http://localhost:3001')\n  //   .then(response=>response.json())\n  //   .then(console.log)\n  // }\n\n  calculateFaceLocation = (data) =>{\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById('inputImage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    return {\n      leftCol : clarifaiFace.left_col * width,\n      topRow : clarifaiFace.top_row * height,\n      rightCol : width - (clarifaiFace.right_col * width),\n      bottomRow : height - (clarifaiFace.bottom_row * height)\n    }\n  }\n\n  displayFaceBox = (box) =>{\n    console.log(box)\n    this.setState({box:box})\n  }\n\n  InputChange = (event) => {\n    this.setState({input:event.target.value});\n  \n  }\n\n  onButtonSubmit = () =>{\n    this.setState({imageURL: this.state.input});\n      fetch('http://localhost:3001/imageUrl',{\n        method: 'POST',\n          headers : {'Content-Type': 'application/json'},\n          body: JSON.stringify({\n              imageUrl: this.state.input\n          })\n      })\n      .then(response=>response.json())\n      .then(response=>{\n        if(response){\n          fetch('http://localhost:3001/image',{\n            method: 'PUT',\n            headers : {'Content-Type': 'application/json'},\n            body: JSON.stringify({\n                id: this.state.user.id\n            })\n          })\n          .then(response1=>response1.json())\n          .then(count=>{\n            //Object.assign is function to change a single element in a object without changing other\n            this.setState(Object.assign(this.state.user,{entries:count})) \n          })\n          .catch(console.log);\n          \n        }\n        this.displayFaceBox(this.calculateFaceLocation(response))\n      })\n    .catch(err=>console.log(err))\n  }\n\n  onRouteChange = (route) => {\n    if(route === 'signout'){\n      this.setState(initialState)\n    }else if(route === 'home'){\n      this.setState({isSignedIn : true})\n    }\n    this.setState({route : route})\n  }\n\n  loadUser = (data) => {\n    this.setState({\n        user : {\n          id : data.id,\n          name : data.name,\n          email: data.email,\n          entries : data.entries,\n          joined : data.joined\n        }\n    })\n  }\n\n  render(){\n    return (\n      \n      <div className=\"App\">\n          <Particles className='particles'\n            params={particleOptions}/>\n          <Navigation isSignedIn={this.state.isSignedIn} onRouteChange={this.onRouteChange}/>\n          {\n            this.state.route === 'home' ?\n            <div>\n              <Logo/>\n              <Rank user={this.state.user}></Rank>\n              <ImageLinkForm onInputChange={this.InputChange} onSubmit={this.onButtonSubmit}/>\n              <FaceRecognition \n              ImageURL={this.state.imageURL} box={this.state.box}></FaceRecognition>\n            </div>\n            :\n            (\n              this.state.route === 'signin' ?\n              <Signin loadUser={this.loadUser} onRouteChange={this.onRouteChange}  />\n              :\n              <Register loadUser={this.loadUser} onRouteChange={this.onRouteChange} />\n            )\n          }\n      </div>\n    );\n  }\n  \n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}